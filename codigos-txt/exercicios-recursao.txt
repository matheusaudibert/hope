uses recursao;

dec prodIntervalo1 : num # num -> num;
--- prodIntervalo1 (x, y) <= if x > y then 1 else x * prodIntervalo1 (x + 1, y);

dec resto : num # num -> num;
--- resto (p, q) <= p mod q;
--- resto (p, q) <= if p < q then p else resto (p - q, q);

dec resto1 : num # num -> num;
--- resto1 (p, q) <= if p < q then p else resto (p - q, q);

dec somaCubos : num -> num;
--- somaCubos 0 <= 0;
--- somaCubos n <= pow (n, 3) + somaCubos (n - 1);

dec contaPares : num -> num;
--- contaPares 0 <= 0;
--- contaPares n <= if n mod 2 = 0 then 1 + contaPares (n - 1) else 0;

dec contaPares2 : num -> num;
--- contaPares 0 <= 0;
--- contaPares 1 <= 1;
--- contaPares n <= if n mod 2 = n then 1 + contaPares (n - 1) else 0;

dec contaPares3 : num -> num;
--- contaPares3 0 <= 0;
--- contaPares3 1 <= 1;
--- contaPares3 n <= if n mod 2 = n then n + contaPares (n - 1) else 0;
--- contaPares3 n <= if n mod 2 = 0 then n + contaPares (n - 1) else 0;

dec contaPares4 : num -> num;
--- contaPares4 0 <= 0;
--- contaPares4 1 <= 1;
--- contaPares4 n <= if n mod 2 = 0 then n + contaPares (n - 1) else 0;

dec contaPares5 : num -> num;
--- contaPares5 0 <= 0;
--- contaPares5 1 <= 1;
--- contaPares5 n <= if n mod 2 = 0 then contaPares (n - 1) + 1 else contaPares (n - 1);

dec somaDigitos : num -> num;
--- somaDigitos 0 <= 0;
--- somaDigitos n <= n mod 10 + somaDigitos (n div 10);

dec somaDigitos2 : num -> num;
--- somaDigitos2 n <= if n mod 10 > 0 then n mod 10 + somaDigitos2 (n div 10) else 0;

dec somaDigitos3 : num -> num;
--- somaDigitos3 n <= if not (n = 0) then n mod 10 + somaDigitos3 (n div 10) else 0;

dec PrimeiroDigito : num -> num;
--- PrimeiroDigito n <= if n < 10 then n else PrimeiroDigito (n div 10);

dec zeros : num -> num;
--- zeros 0 <= 1;
--- zeros n <= if n < 10 then 0 else if n mod 10 = 0 then 1 + zeros (n div 10) else zeros (n div 10);

dec somaQuadrados : num -> num;
--- somaQuadrados 0 <= 0;
--- somaQuadrados n <= pow (n, 2) + somaQuadrados (n - 1);